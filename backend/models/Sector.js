// backend/models/Sector.js (REFATORADO COM ASSOCIAÃ‡ÃƒO)

const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User'); // ðŸš¨ Importa o User ðŸš¨
const UserSector = require('./UserSector'); // ðŸš¨ Importa o Model IntermediÃ¡rio ðŸš¨

const Sector = sequelize.define('Sector', {
    id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
    name: { type: DataTypes.STRING, allowNull: false },
});

// ðŸš¨ ASSOCIAÃ‡Ã•ES MUITOS-PARA-MUITOS (N:N) ðŸš¨
// Define que Sector pode ter muitos Users (e vice-versa), atravÃ©s da tabela UserSector
Sector.belongsToMany(User, { 
    through: UserSector, 
    foreignKey: 'sectorId', 
    as: 'Users' 
});

// O User precisa ser configurado para o relacionamento N:N tambÃ©m, 
// o que faremos logo abaixo para garantir que ambos os Models se conheÃ§am.

// NÃ£o se preocupe, essa definiÃ§Ã£o aqui nÃ£o substitui a que vocÃª tem no User.js.
// Ã‰ apenas a convenÃ§Ã£o do Sequelize para que a associaÃ§Ã£o funcione corretamente.
User.belongsToMany(Sector, { 
    through: UserSector, 
    foreignKey: 'userId', 
    as: 'Sectors' 
});


module.exports = Sector;