import { useState, useEffect } from 'react';
import { Container, Typography, Grid } from '@mui/material'; 
import ProductForm from '../components/ProductForm';
import ProductList from '../components/ProductList';
import API from '../api';
import { toast } from 'react-toastify';

// üö® NOVO: Recebe as props userRole e userSectorIds üö®
function ProdutosPage({ loggedUser, userRole, userSectorIds }) {
    const [products, setProducts] = useState([]);
    const [allSectors, setAllSectors] = useState([]); // Renomeado para clareza
    const [userProducts, setUserProducts] = useState([]);
    
    // üö® 1. L√≥gica de permiss√£o de visualiza√ß√£o üö®
    const canManageProducts = userRole === 'ADMIN' || userRole === 'VENDEDOR';
    const isSeller = userRole === 'VENDEDOR';
    
    // üö® 2. Define a lista de setores que o usu√°rio PODE ver/usar üö®
    const allowedSectors = isSeller
        ? allSectors.filter(sector => userSectorIds.includes(sector.id))
        : allSectors; // ADMIN v√™ todos

    const fetchProducts = async () => {
        // Esta chamada API j√° retorna os produtos FILTRADOS pelo Backend!
        const res = await API.get('/products');
        setProducts(res.data);
    };

    const fetchAllSectors = async () => {
        // Busca todos os setores, a filtragem visual √© feita abaixo
        const res = await API.get('/sectors');
        setAllSectors(res.data);
    };

    // A fun√ß√£o fetchUserProducts n√£o √© mais estritamente necess√°ria, pois fetchProducts
    // j√° retorna a lista filtrada se o usu√°rio for VENDEDOR.
    // Podemos simplificar e usar apenas a lista `products`.

    useEffect(() => {
        fetchProducts(); // Busca lista filtrada do Backend
        fetchAllSectors(); // Busca todos os setores
    }, [loggedUser]); // Roda sempre que o usu√°rio logado mudar

    const handleDeleteProduct = async (id) => {
        try {
            await API.delete(`/products/${id}`);
            // Filtra a lista principal ap√≥s deletar
            setProducts(products.filter(p => p.id !== id));
            toast.success('Produto deletado com sucesso!');
        } catch(error) {
            // O Backend deve retornar 403 se o Vendedor tentar deletar um produto de outro setor
            const errorMessage = error.response?.data?.error || 'Erro ao deletar produto.';
            toast.error(errorMessage);
        }
    };
    
    // Fun√ß√£o unificada para refetch ap√≥s adicionar/editar
    const handleProductAction = () => {
        fetchProducts();
    };

    return (
        <Container maxWidth="lg" style={{ marginTop: '30px' }}>
            <Typography variant="h4" gutterBottom>
                Gerenciamento de Produtos
            </Typography>

            <Grid container spacing={3}>
                {/* üö® 3. EXIBI√á√ÉO CONDICIONAL DO FORMUL√ÅRIO üö® */}
                {canManageProducts && (
                    <Grid item xs={12}>
                        <ProductForm 
                            // Passa apenas os setores permitidos para o Dropdown
                            sectors={allowedSectors} 
                            onAdd={handleProductAction} 
                            // Adicionar prop para lidar com edi√ß√£o, se houver
                        />
                    </Grid>
                )}

                {/* Lista de Produtos (j√° filtrada pelo Backend) */}
                <Grid item xs={12}>
                    <ProductList 
                        products={products} // Usa a lista filtrada do Backend
                        onDelete={handleDeleteProduct}
                        // üö® 4. Passa a permiss√£o para a lista esconder bot√µes de DELETE/EDIT üö®
                        userRole={userRole}
                        userSectorIds={userSectorIds}
                    />
                </Grid>
            </Grid>
        </Container>
    );
}

export default ProdutosPage;